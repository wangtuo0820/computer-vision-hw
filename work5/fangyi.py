# -*- coding: utf-8 -*-"""Created on 2018/10/10@author: ni"""import cv2import numpy as npfrom numpy import matfrom mpl_toolkits.mplot3d import Axes3Dimport matplotlib.pyplot as pltif __name__ == '__main__':    img1 = cv2.imread('(0 0 -1).png', cv2.IMREAD_COLOR)    img1 = cv2.cvtColor(img1, cv2.COLOR_RGB2GRAY)    img1 = np.array(img1)    img2 = cv2.imread('(0 0.2 -1).png', cv2.IMREAD_COLOR)    img2 = cv2.cvtColor(img2, cv2.COLOR_RGB2GRAY)    img2 = np.array(img2)    img3 = cv2.imread('(0 -0.2 -1).png', cv2.IMREAD_COLOR)    img3 = cv2.cvtColor(img3, cv2.COLOR_RGB2GRAY)    img3 = np.array(img3)    img4 = cv2.imread('(0.2 0 -1).png', cv2.IMREAD_COLOR)    img4 = cv2.cvtColor(img4, cv2.COLOR_RGB2GRAY)    img4 = np.array(img4)    s1 = (0, 0, -1)    s2 = (0, 0.2, -1)    s3 = (0, -0.2, -1)    s4 = (0.2, 0, -1)    n_map = np.zeros(shape=[img1.shape[0], img1.shape[1], 3])    img_i = mat(np.zeros(shape=[4, 1]))    s = mat(np.array([s1, s2, s3, s4]))    for i in range(img1.shape[0]):        for j in range(img1.shape[1]):            img_i[0, 0] = img1[i, j]            img_i[1, 0] = img2[i, j]            img_i[2, 0] = img3[i, j]            img_i[3, 0] = img4[i, j]            n_temp = (s.T*s).I*s.T*img_i            roll = np.linalg.norm(n_temp, ord=2)            n_temp = n_temp/roll            n_map[i, j, 0] = n_temp[0, 0]            n_map[i, j, 1] = n_temp[1, 0]            n_map[i, j, 2] = n_temp[2, 0]    z_map = np.zeros(shape=[img1.shape[0], img1.shape[1]])    for i in range(img1.shape[0]):        for j in range(img1.shape[1]):            if i==0 and j==0:                z_map[0, 0] = 0            elif j==0:                z_map[i, j] = z_map[i - 1, j] - n_map[i - 1, j, 0] / n_map[i - 1, j, 2]            elif i==0:                z_map[i, j] = z_map[i, j-1]-n_map[i, j-1, 1]/n_map[i, j-1, 2]            else:                z_map[i, j] = 0.5*(z_map[i, j - 1] - n_map[i, j - 1, 1] / n_map[i, j - 1, 2])+\                              0.5*(z_map[i - 1, j] - n_map[i - 1, j, 0] / n_map[i - 1, j, 2])    fig = plt.figure()    ax = Axes3D(fig)    x = [np.array([0 for _ in range(img1.shape[0])])+i for i in range(img1.shape[1])]    y = [[i for i in range(img1.shape[0])] for _ in range(img1.shape[1])]    X = np.array(x)    Y = np.array(y)    z_map = np.array(z_map)    print(X.shape, Y.shape, z_map.shape)    ax.plot_surface(X, Y, z_map, rstride=1, cstride=1, cmap=plt.get_cmap('rainbow'))    plt.show()